// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with no fields
func (_m *MockCache) Clear() {
	_m.Called()
}

// MockCache_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockCache_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockCache_Expecter) Clear() *MockCache_Clear_Call {
	return &MockCache_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockCache_Clear_Call) Run(run func()) *MockCache_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Clear_Call) Return() *MockCache_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Clear_Call) RunAndReturn(run func()) *MockCache_Clear_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockCache) Delete(key string) {
	_m.Called(key)
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter) Delete(key interface{}) *MockCache_Delete_Call {
	return &MockCache_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockCache_Delete_Call) Run(run func(key string)) *MockCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Delete_Call) Return() *MockCache_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Delete_Call) RunAndReturn(run func(string)) *MockCache_Delete_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockCache) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter) Get(key interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockCache_Get_Call) Run(run func(key string)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(_a0 interface{}, _a1 bool) *MockCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(string) (interface{}, bool)) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with no fields
func (_m *MockCache) Keys() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockCache_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockCache_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *MockCache_Expecter) Keys() *MockCache_Keys_Call {
	return &MockCache_Keys_Call{Call: _e.mock.On("Keys")}
}

func (_c *MockCache_Keys_Call) Run(run func()) *MockCache_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Keys_Call) Return(_a0 []string) *MockCache_Keys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Keys_Call) RunAndReturn(run func() []string) *MockCache_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, expiration
func (_m *MockCache) Set(key string, value interface{}, expiration time.Duration) {
	_m.Called(key, value, expiration)
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *MockCache_Expecter) Set(key interface{}, value interface{}, expiration interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set", key, value, expiration)}
}

func (_c *MockCache_Set_Call) Run(run func(key string, value interface{}, expiration time.Duration)) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCache_Set_Call) Return() *MockCache_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(string, interface{}, time.Duration)) *MockCache_Set_Call {
	_c.Run(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockCache) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockCache_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockCache_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockCache_Expecter) Size() *MockCache_Size_Call {
	return &MockCache_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockCache_Size_Call) Run(run func()) *MockCache_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Size_Call) Return(_a0 int) *MockCache_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Size_Call) RunAndReturn(run func() int) *MockCache_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
