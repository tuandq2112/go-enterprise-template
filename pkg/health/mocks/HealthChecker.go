// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	health "go-clean-ddd-es-template/pkg/health"

	mock "github.com/stretchr/testify/mock"
)

// MockHealthChecker is an autogenerated mock type for the HealthChecker type
type MockHealthChecker struct {
	mock.Mock
}

type MockHealthChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthChecker) EXPECT() *MockHealthChecker_Expecter {
	return &MockHealthChecker_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx
func (_m *MockHealthChecker) Execute(ctx context.Context) health.Check {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 health.Check
	if rf, ok := ret.Get(0).(func(context.Context) health.Check); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(health.Check)
	}

	return r0
}

// MockHealthChecker_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHealthChecker_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHealthChecker_Expecter) Execute(ctx interface{}) *MockHealthChecker_Execute_Call {
	return &MockHealthChecker_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *MockHealthChecker_Execute_Call) Run(run func(ctx context.Context)) *MockHealthChecker_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHealthChecker_Execute_Call) Return(_a0 health.Check) *MockHealthChecker_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHealthChecker_Execute_Call) RunAndReturn(run func(context.Context) health.Check) *MockHealthChecker_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHealthChecker creates a new instance of MockHealthChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthChecker {
	mock := &MockHealthChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
