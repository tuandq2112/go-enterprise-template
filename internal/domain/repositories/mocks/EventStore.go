// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	events "go-clean-ddd-es-template/internal/domain/events"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockEventStore is an autogenerated mock type for the EventStore type
type MockEventStore struct {
	mock.Mock
}

type MockEventStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventStore) EXPECT() *MockEventStore_Expecter {
	return &MockEventStore_Expecter{mock: &_m.Mock}
}

// GetEvents provides a mock function with given fields: ctx, aggregateID
func (_m *MockEventStore) GetEvents(ctx context.Context, aggregateID string) ([]*events.Event, error) {
	ret := _m.Called(ctx, aggregateID)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []*events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*events.Event, error)); ok {
		return rf(ctx, aggregateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*events.Event); ok {
		r0 = rf(ctx, aggregateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, aggregateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockEventStore_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - aggregateID string
func (_e *MockEventStore_Expecter) GetEvents(ctx interface{}, aggregateID interface{}) *MockEventStore_GetEvents_Call {
	return &MockEventStore_GetEvents_Call{Call: _e.mock.On("GetEvents", ctx, aggregateID)}
}

func (_c *MockEventStore_GetEvents_Call) Run(run func(ctx context.Context, aggregateID string)) *MockEventStore_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEventStore_GetEvents_Call) Return(_a0 []*events.Event, _a1 error) *MockEventStore_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStore_GetEvents_Call) RunAndReturn(run func(context.Context, string) ([]*events.Event, error)) *MockEventStore_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsByType provides a mock function with given fields: ctx, eventType
func (_m *MockEventStore) GetEventsByType(ctx context.Context, eventType string) ([]*events.Event, error) {
	ret := _m.Called(ctx, eventType)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByType")
	}

	var r0 []*events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*events.Event, error)); ok {
		return rf(ctx, eventType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*events.Event); ok {
		r0 = rf(ctx, eventType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, eventType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_GetEventsByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsByType'
type MockEventStore_GetEventsByType_Call struct {
	*mock.Call
}

// GetEventsByType is a helper method to define mock.On call
//   - ctx context.Context
//   - eventType string
func (_e *MockEventStore_Expecter) GetEventsByType(ctx interface{}, eventType interface{}) *MockEventStore_GetEventsByType_Call {
	return &MockEventStore_GetEventsByType_Call{Call: _e.mock.On("GetEventsByType", ctx, eventType)}
}

func (_c *MockEventStore_GetEventsByType_Call) Run(run func(ctx context.Context, eventType string)) *MockEventStore_GetEventsByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEventStore_GetEventsByType_Call) Return(_a0 []*events.Event, _a1 error) *MockEventStore_GetEventsByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStore_GetEventsByType_Call) RunAndReturn(run func(context.Context, string) ([]*events.Event, error)) *MockEventStore_GetEventsByType_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsSince provides a mock function with given fields: ctx, since
func (_m *MockEventStore) GetEventsSince(ctx context.Context, since time.Time) ([]*events.Event, error) {
	ret := _m.Called(ctx, since)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsSince")
	}

	var r0 []*events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*events.Event, error)); ok {
		return rf(ctx, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*events.Event); ok {
		r0 = rf(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_GetEventsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsSince'
type MockEventStore_GetEventsSince_Call struct {
	*mock.Call
}

// GetEventsSince is a helper method to define mock.On call
//   - ctx context.Context
//   - since time.Time
func (_e *MockEventStore_Expecter) GetEventsSince(ctx interface{}, since interface{}) *MockEventStore_GetEventsSince_Call {
	return &MockEventStore_GetEventsSince_Call{Call: _e.mock.On("GetEventsSince", ctx, since)}
}

func (_c *MockEventStore_GetEventsSince_Call) Run(run func(ctx context.Context, since time.Time)) *MockEventStore_GetEventsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *MockEventStore_GetEventsSince_Call) Return(_a0 []*events.Event, _a1 error) *MockEventStore_GetEventsSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStore_GetEventsSince_Call) RunAndReturn(run func(context.Context, time.Time) ([]*events.Event, error)) *MockEventStore_GetEventsSince_Call {
	_c.Call.Return(run)
	return _c
}

// SaveEvent provides a mock function with given fields: ctx, aggregateID, event
func (_m *MockEventStore) SaveEvent(ctx context.Context, aggregateID string, event *events.Event) error {
	ret := _m.Called(ctx, aggregateID, event)

	if len(ret) == 0 {
		panic("no return value specified for SaveEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *events.Event) error); ok {
		r0 = rf(ctx, aggregateID, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_SaveEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveEvent'
type MockEventStore_SaveEvent_Call struct {
	*mock.Call
}

// SaveEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - aggregateID string
//   - event *events.Event
func (_e *MockEventStore_Expecter) SaveEvent(ctx interface{}, aggregateID interface{}, event interface{}) *MockEventStore_SaveEvent_Call {
	return &MockEventStore_SaveEvent_Call{Call: _e.mock.On("SaveEvent", ctx, aggregateID, event)}
}

func (_c *MockEventStore_SaveEvent_Call) Run(run func(ctx context.Context, aggregateID string, event *events.Event)) *MockEventStore_SaveEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*events.Event))
	})
	return _c
}

func (_c *MockEventStore_SaveEvent_Call) Return(_a0 error) *MockEventStore_SaveEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventStore_SaveEvent_Call) RunAndReturn(run func(context.Context, string, *events.Event) error) *MockEventStore_SaveEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventStore creates a new instance of MockEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventStore {
	mock := &MockEventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
