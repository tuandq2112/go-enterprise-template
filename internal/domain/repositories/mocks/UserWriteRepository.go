// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "go-clean-ddd-es-template/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockUserWriteRepository is an autogenerated mock type for the UserWriteRepository type
type MockUserWriteRepository struct {
	mock.Mock
}

type MockUserWriteRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserWriteRepository) EXPECT() *MockUserWriteRepository_Expecter {
	return &MockUserWriteRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUserWriteRepository) Create(ctx context.Context, user *entities.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserWriteRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserWriteRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.User
func (_e *MockUserWriteRepository_Expecter) Create(ctx interface{}, user interface{}) *MockUserWriteRepository_Create_Call {
	return &MockUserWriteRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserWriteRepository_Create_Call) Run(run func(ctx context.Context, user *entities.User)) *MockUserWriteRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *MockUserWriteRepository_Create_Call) Return(_a0 error) *MockUserWriteRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserWriteRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.User) error) *MockUserWriteRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, userID
func (_m *MockUserWriteRepository) Delete(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserWriteRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserWriteRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserWriteRepository_Expecter) Delete(ctx interface{}, userID interface{}) *MockUserWriteRepository_Delete_Call {
	return &MockUserWriteRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, userID)}
}

func (_c *MockUserWriteRepository_Delete_Call) Run(run func(ctx context.Context, userID string)) *MockUserWriteRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserWriteRepository_Delete_Call) Return(_a0 error) *MockUserWriteRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserWriteRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockUserWriteRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserWriteRepository) GetByEmail(ctx context.Context, email string) (*entities.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserWriteRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserWriteRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserWriteRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserWriteRepository_GetByEmail_Call {
	return &MockUserWriteRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserWriteRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserWriteRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserWriteRepository_GetByEmail_Call) Return(_a0 *entities.User, _a1 error) *MockUserWriteRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserWriteRepository_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *MockUserWriteRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *MockUserWriteRepository) GetByID(ctx context.Context, userID string) (*entities.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserWriteRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserWriteRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserWriteRepository_Expecter) GetByID(ctx interface{}, userID interface{}) *MockUserWriteRepository_GetByID_Call {
	return &MockUserWriteRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, userID)}
}

func (_c *MockUserWriteRepository_GetByID_Call) Run(run func(ctx context.Context, userID string)) *MockUserWriteRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserWriteRepository_GetByID_Call) Return(_a0 *entities.User, _a1 error) *MockUserWriteRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserWriteRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *MockUserWriteRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockUserWriteRepository) List(ctx context.Context) ([]*entities.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserWriteRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUserWriteRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserWriteRepository_Expecter) List(ctx interface{}) *MockUserWriteRepository_List_Call {
	return &MockUserWriteRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockUserWriteRepository_List_Call) Run(run func(ctx context.Context)) *MockUserWriteRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserWriteRepository_List_Call) Return(_a0 []*entities.User, _a1 error) *MockUserWriteRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserWriteRepository_List_Call) RunAndReturn(run func(context.Context) ([]*entities.User, error)) *MockUserWriteRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUserWriteRepository) Update(ctx context.Context, user *entities.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserWriteRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserWriteRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.User
func (_e *MockUserWriteRepository_Expecter) Update(ctx interface{}, user interface{}) *MockUserWriteRepository_Update_Call {
	return &MockUserWriteRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserWriteRepository_Update_Call) Run(run func(ctx context.Context, user *entities.User)) *MockUserWriteRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *MockUserWriteRepository_Update_Call) Return(_a0 error) *MockUserWriteRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserWriteRepository_Update_Call) RunAndReturn(run func(context.Context, *entities.User) error) *MockUserWriteRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserWriteRepository creates a new instance of MockUserWriteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserWriteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserWriteRepository {
	mock := &MockUserWriteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
