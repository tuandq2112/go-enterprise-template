// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "go-clean-ddd-es-template/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockUserReadRepository is an autogenerated mock type for the UserReadRepository type
type MockUserReadRepository struct {
	mock.Mock
}

type MockUserReadRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserReadRepository) EXPECT() *MockUserReadRepository_Expecter {
	return &MockUserReadRepository_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *MockUserReadRepository) DeleteUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserReadRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserReadRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserReadRepository_Expecter) DeleteUser(ctx interface{}, userID interface{}) *MockUserReadRepository_DeleteUser_Call {
	return &MockUserReadRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *MockUserReadRepository_DeleteUser_Call) Run(run func(ctx context.Context, userID string)) *MockUserReadRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserReadRepository_DeleteUser_Call) Return(_a0 error) *MockUserReadRepository_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserReadRepository_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockUserReadRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsByType provides a mock function with given fields: ctx, eventType
func (_m *MockUserReadRepository) GetEventsByType(ctx context.Context, eventType string) ([]*entities.UserEvent, error) {
	ret := _m.Called(ctx, eventType)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByType")
	}

	var r0 []*entities.UserEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.UserEvent, error)); ok {
		return rf(ctx, eventType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.UserEvent); ok {
		r0 = rf(ctx, eventType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.UserEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, eventType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserReadRepository_GetEventsByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsByType'
type MockUserReadRepository_GetEventsByType_Call struct {
	*mock.Call
}

// GetEventsByType is a helper method to define mock.On call
//   - ctx context.Context
//   - eventType string
func (_e *MockUserReadRepository_Expecter) GetEventsByType(ctx interface{}, eventType interface{}) *MockUserReadRepository_GetEventsByType_Call {
	return &MockUserReadRepository_GetEventsByType_Call{Call: _e.mock.On("GetEventsByType", ctx, eventType)}
}

func (_c *MockUserReadRepository_GetEventsByType_Call) Run(run func(ctx context.Context, eventType string)) *MockUserReadRepository_GetEventsByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserReadRepository_GetEventsByType_Call) Return(_a0 []*entities.UserEvent, _a1 error) *MockUserReadRepository_GetEventsByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserReadRepository_GetEventsByType_Call) RunAndReturn(run func(context.Context, string) ([]*entities.UserEvent, error)) *MockUserReadRepository_GetEventsByType_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserReadRepository) GetUserByEmail(ctx context.Context, email string) (*entities.UserReadModel, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *entities.UserReadModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.UserReadModel, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.UserReadModel); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserReadModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserReadRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserReadRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserReadRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserReadRepository_GetUserByEmail_Call {
	return &MockUserReadRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserReadRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserReadRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserReadRepository_GetUserByEmail_Call) Return(_a0 *entities.UserReadModel, _a1 error) *MockUserReadRepository_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserReadRepository_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*entities.UserReadModel, error)) *MockUserReadRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *MockUserReadRepository) GetUserByID(ctx context.Context, userID string) (*entities.UserReadModel, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *entities.UserReadModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.UserReadModel, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.UserReadModel); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserReadModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserReadRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserReadRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserReadRepository_Expecter) GetUserByID(ctx interface{}, userID interface{}) *MockUserReadRepository_GetUserByID_Call {
	return &MockUserReadRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *MockUserReadRepository_GetUserByID_Call) Run(run func(ctx context.Context, userID string)) *MockUserReadRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserReadRepository_GetUserByID_Call) Return(_a0 *entities.UserReadModel, _a1 error) *MockUserReadRepository_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserReadRepository_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*entities.UserReadModel, error)) *MockUserReadRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserEvents provides a mock function with given fields: ctx, userID
func (_m *MockUserReadRepository) GetUserEvents(ctx context.Context, userID string) ([]*entities.UserEvent, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEvents")
	}

	var r0 []*entities.UserEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.UserEvent, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.UserEvent); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.UserEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserReadRepository_GetUserEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserEvents'
type MockUserReadRepository_GetUserEvents_Call struct {
	*mock.Call
}

// GetUserEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserReadRepository_Expecter) GetUserEvents(ctx interface{}, userID interface{}) *MockUserReadRepository_GetUserEvents_Call {
	return &MockUserReadRepository_GetUserEvents_Call{Call: _e.mock.On("GetUserEvents", ctx, userID)}
}

func (_c *MockUserReadRepository_GetUserEvents_Call) Run(run func(ctx context.Context, userID string)) *MockUserReadRepository_GetUserEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserReadRepository_GetUserEvents_Call) Return(_a0 []*entities.UserEvent, _a1 error) *MockUserReadRepository_GetUserEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserReadRepository_GetUserEvents_Call) RunAndReturn(run func(context.Context, string) ([]*entities.UserEvent, error)) *MockUserReadRepository_GetUserEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, page, pageSize
func (_m *MockUserReadRepository) ListUsers(ctx context.Context, page int, pageSize int) ([]*entities.UserReadModel, int64, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*entities.UserReadModel
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*entities.UserReadModel, int64, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*entities.UserReadModel); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.UserReadModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int64); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserReadRepository_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockUserReadRepository_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *MockUserReadRepository_Expecter) ListUsers(ctx interface{}, page interface{}, pageSize interface{}) *MockUserReadRepository_ListUsers_Call {
	return &MockUserReadRepository_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, page, pageSize)}
}

func (_c *MockUserReadRepository_ListUsers_Call) Run(run func(ctx context.Context, page int, pageSize int)) *MockUserReadRepository_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUserReadRepository_ListUsers_Call) Return(_a0 []*entities.UserReadModel, _a1 int64, _a2 error) *MockUserReadRepository_ListUsers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserReadRepository_ListUsers_Call) RunAndReturn(run func(context.Context, int, int) ([]*entities.UserReadModel, int64, error)) *MockUserReadRepository_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SaveEvent provides a mock function with given fields: ctx, event
func (_m *MockUserReadRepository) SaveEvent(ctx context.Context, event *entities.UserEvent) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for SaveEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserReadRepository_SaveEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveEvent'
type MockUserReadRepository_SaveEvent_Call struct {
	*mock.Call
}

// SaveEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event *entities.UserEvent
func (_e *MockUserReadRepository_Expecter) SaveEvent(ctx interface{}, event interface{}) *MockUserReadRepository_SaveEvent_Call {
	return &MockUserReadRepository_SaveEvent_Call{Call: _e.mock.On("SaveEvent", ctx, event)}
}

func (_c *MockUserReadRepository_SaveEvent_Call) Run(run func(ctx context.Context, event *entities.UserEvent)) *MockUserReadRepository_SaveEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.UserEvent))
	})
	return _c
}

func (_c *MockUserReadRepository_SaveEvent_Call) Return(_a0 error) *MockUserReadRepository_SaveEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserReadRepository_SaveEvent_Call) RunAndReturn(run func(context.Context, *entities.UserEvent) error) *MockUserReadRepository_SaveEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *MockUserReadRepository) SaveUser(ctx context.Context, user *entities.UserReadModel) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserReadModel) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserReadRepository_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockUserReadRepository_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.UserReadModel
func (_e *MockUserReadRepository_Expecter) SaveUser(ctx interface{}, user interface{}) *MockUserReadRepository_SaveUser_Call {
	return &MockUserReadRepository_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *MockUserReadRepository_SaveUser_Call) Run(run func(ctx context.Context, user *entities.UserReadModel)) *MockUserReadRepository_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.UserReadModel))
	})
	return _c
}

func (_c *MockUserReadRepository_SaveUser_Call) Return(_a0 error) *MockUserReadRepository_SaveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserReadRepository_SaveUser_Call) RunAndReturn(run func(context.Context, *entities.UserReadModel) error) *MockUserReadRepository_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *MockUserReadRepository) UpdateUser(ctx context.Context, user *entities.UserReadModel) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserReadModel) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserReadRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserReadRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.UserReadModel
func (_e *MockUserReadRepository_Expecter) UpdateUser(ctx interface{}, user interface{}) *MockUserReadRepository_UpdateUser_Call {
	return &MockUserReadRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *MockUserReadRepository_UpdateUser_Call) Run(run func(ctx context.Context, user *entities.UserReadModel)) *MockUserReadRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.UserReadModel))
	})
	return _c
}

func (_c *MockUserReadRepository_UpdateUser_Call) Return(_a0 error) *MockUserReadRepository_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserReadRepository_UpdateUser_Call) RunAndReturn(run func(context.Context, *entities.UserReadModel) error) *MockUserReadRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserReadRepository creates a new instance of MockUserReadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserReadRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserReadRepository {
	mock := &MockUserReadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
