// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	events "go-clean-ddd-es-template/internal/domain/events"

	mock "github.com/stretchr/testify/mock"
)

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher struct {
	mock.Mock
}

type MockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisher) EXPECT() *MockEventPublisher_Expecter {
	return &MockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishEvent provides a mock function with given fields: ctx, event
func (_m *MockEventPublisher) PublishEvent(ctx context.Context, event *events.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for PublishEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *events.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventPublisher_PublishEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEvent'
type MockEventPublisher_PublishEvent_Call struct {
	*mock.Call
}

// PublishEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event *events.Event
func (_e *MockEventPublisher_Expecter) PublishEvent(ctx interface{}, event interface{}) *MockEventPublisher_PublishEvent_Call {
	return &MockEventPublisher_PublishEvent_Call{Call: _e.mock.On("PublishEvent", ctx, event)}
}

func (_c *MockEventPublisher_PublishEvent_Call) Run(run func(ctx context.Context, event *events.Event)) *MockEventPublisher_PublishEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*events.Event))
	})
	return _c
}

func (_c *MockEventPublisher_PublishEvent_Call) Return(_a0 error) *MockEventPublisher_PublishEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventPublisher_PublishEvent_Call) RunAndReturn(run func(context.Context, *events.Event) error) *MockEventPublisher_PublishEvent_Call {
	_c.Call.Return(run)
	return _c
}

// PublishEvents provides a mock function with given fields: ctx, _a1
func (_m *MockEventPublisher) PublishEvents(ctx context.Context, _a1 []*events.Event) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PublishEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*events.Event) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventPublisher_PublishEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEvents'
type MockEventPublisher_PublishEvents_Call struct {
	*mock.Call
}

// PublishEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 []*events.Event
func (_e *MockEventPublisher_Expecter) PublishEvents(ctx interface{}, _a1 interface{}) *MockEventPublisher_PublishEvents_Call {
	return &MockEventPublisher_PublishEvents_Call{Call: _e.mock.On("PublishEvents", ctx, _a1)}
}

func (_c *MockEventPublisher_PublishEvents_Call) Run(run func(ctx context.Context, _a1 []*events.Event)) *MockEventPublisher_PublishEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*events.Event))
	})
	return _c
}

func (_c *MockEventPublisher_PublishEvents_Call) Return(_a0 error) *MockEventPublisher_PublishEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventPublisher_PublishEvents_Call) RunAndReturn(run func(context.Context, []*events.Event) error) *MockEventPublisher_PublishEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher {
	mock := &MockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
