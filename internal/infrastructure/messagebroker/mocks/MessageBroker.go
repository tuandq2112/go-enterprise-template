// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// MockMessageBroker is an autogenerated mock type for the MessageBroker type
type MockMessageBroker struct {
	mock.Mock
}

type MockMessageBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageBroker) EXPECT() *MockMessageBroker_Expecter {
	return &MockMessageBroker_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockMessageBroker) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageBroker_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockMessageBroker_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockMessageBroker_Expecter) Close() *MockMessageBroker_Close_Call {
	return &MockMessageBroker_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockMessageBroker_Close_Call) Run(run func()) *MockMessageBroker_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBroker_Close_Call) Return(_a0 error) *MockMessageBroker_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBroker_Close_Call) RunAndReturn(run func() error) *MockMessageBroker_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with no fields
func (_m *MockMessageBroker) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageBroker_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockMessageBroker_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockMessageBroker_Expecter) Connect() *MockMessageBroker_Connect_Call {
	return &MockMessageBroker_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockMessageBroker_Connect_Call) Run(run func()) *MockMessageBroker_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBroker_Connect_Call) Return(_a0 error) *MockMessageBroker_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBroker_Connect_Call) RunAndReturn(run func() error) *MockMessageBroker_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsumer provides a mock function with no fields
func (_m *MockMessageBroker) GetConsumer() sarama.Consumer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsumer")
	}

	var r0 sarama.Consumer
	if rf, ok := ret.Get(0).(func() sarama.Consumer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sarama.Consumer)
		}
	}

	return r0
}

// MockMessageBroker_GetConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsumer'
type MockMessageBroker_GetConsumer_Call struct {
	*mock.Call
}

// GetConsumer is a helper method to define mock.On call
func (_e *MockMessageBroker_Expecter) GetConsumer() *MockMessageBroker_GetConsumer_Call {
	return &MockMessageBroker_GetConsumer_Call{Call: _e.mock.On("GetConsumer")}
}

func (_c *MockMessageBroker_GetConsumer_Call) Run(run func()) *MockMessageBroker_GetConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageBroker_GetConsumer_Call) Return(_a0 sarama.Consumer) *MockMessageBroker_GetConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBroker_GetConsumer_Call) RunAndReturn(run func() sarama.Consumer) *MockMessageBroker_GetConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: topic, message
func (_m *MockMessageBroker) Publish(topic string, message []byte) error {
	ret := _m.Called(topic, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageBroker_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMessageBroker_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - message []byte
func (_e *MockMessageBroker_Expecter) Publish(topic interface{}, message interface{}) *MockMessageBroker_Publish_Call {
	return &MockMessageBroker_Publish_Call{Call: _e.mock.On("Publish", topic, message)}
}

func (_c *MockMessageBroker_Publish_Call) Run(run func(topic string, message []byte)) *MockMessageBroker_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockMessageBroker_Publish_Call) Return(_a0 error) *MockMessageBroker_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBroker_Publish_Call) RunAndReturn(run func(string, []byte) error) *MockMessageBroker_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: topic, handler
func (_m *MockMessageBroker) Subscribe(topic string, handler func([]byte)) error {
	ret := _m.Called(topic, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func([]byte)) error); ok {
		r0 = rf(topic, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageBroker_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockMessageBroker_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic string
//   - handler func([]byte)
func (_e *MockMessageBroker_Expecter) Subscribe(topic interface{}, handler interface{}) *MockMessageBroker_Subscribe_Call {
	return &MockMessageBroker_Subscribe_Call{Call: _e.mock.On("Subscribe", topic, handler)}
}

func (_c *MockMessageBroker_Subscribe_Call) Run(run func(topic string, handler func([]byte))) *MockMessageBroker_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func([]byte)))
	})
	return _c
}

func (_c *MockMessageBroker_Subscribe_Call) Return(_a0 error) *MockMessageBroker_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageBroker_Subscribe_Call) RunAndReturn(run func(string, func([]byte)) error) *MockMessageBroker_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageBroker creates a new instance of MockMessageBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageBroker {
	mock := &MockMessageBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
